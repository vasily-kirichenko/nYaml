using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.IO;
using Nemerle.Utility;
using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;
using nYaml;
using SharpYaml;
using SharpYaml.Serialization;

namespace TestConsole {
/*    [assembly: Yaml(Y4, <#
IntValue: 1
FloatValue: 2.2
StringValue: a string
UriValue: http://domain.com
TimeSpanValue: 1.00:00:05
AnotherIntValue: 22
Person:
  Age: 22
AList:
  - 1
  - 2
        #>)];*/
        
    [assembly: Yaml(Y4, <#
IntValue: 1
FloatValue: 2.2
StringValue: a string
AnotherIntValue: 22
Person:
  Age: 22
AList: 
  - 1
  - 2
        #>)];

    module Program
    {
        [Record]
        class R {
            public F: int
        }
        
        Main() : void
        {
            def y4 = Y4();
            //def anotherIntValue = y4.AnotherIntValue;
            //def intValue = y4.IntValue;
            //def floatValue = y4.FloatValue;
            //def stringValue = y4.StringValue;
            //def uriValue = y4.UriValue;
            //def timeSpanValue = y4.TimeSpanValue;
            //def personAge = y4.Person.Age;
            //def intElem = y4.AList[0];
            
            def serializer = Serializer();
            def yaml = <#
IntValue: 100
FloatValue: 2.2
StringValue: a string
AnotherIntValue: 220
Person:
  Age: 22
AList:
  - 1
  - 2
#>;
            def y42 = serializer.Deserialize.[Y4](System.IO.StringReader(yaml));
            WriteLine($"IntValue(2) = $(y42.IntValue)");

            //WriteLine(y4.AstAsString);
            //WriteLine($"$intValue, $floatValue, $stringValue, $uriValue, $timeSpanValue");
            //WriteLine(GetLocals());
            
            _ = ReadLine();
        }
    }
}