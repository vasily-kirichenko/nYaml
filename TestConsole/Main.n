using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.IO;
using Nemerle.Utility;
using System;
using System.IO;
using System.Collections.Generic;
using System.Console;
using System.Linq;
using nYaml;
using SharpYaml;
using SharpYaml.Serialization;

namespace TestConsole {
    [assembly: Yaml(Y4, <#
IntValue: 1
FloatValue: 2.2
StringValue: a string 
AnotherIntValue: 22
BoolValue: true
Person:
  Age: 22 #>)];
//ListOfMaps:
  //- Name: name1
  //  Age: 33
  //  Weight: 60.2
  //- Name: name2
  //  Age: 44
  //  Weight: 50
  //  Pet: 1
  //AList: 
  //- 1
  //- 2.0
  //- "foo"
  //      #>)];

    module Program
    {
        [Record]
        variant V {
            public shared: int;
            | Case1 { i: int }
            public GetShared(): (int * int) {
                match (Case1(2, 3)) {
                | Case1(i) as c1 => (i, c1.shared)
                }
            }
        }
        
        Main() : void
        {
            //def y4 = Y4();
            //WriteLine(y4.AstAsString);
            //WriteLine($"AList = $(y4.AList.NToList())");
            
/*            def yaml = <#
IntValue: 100
FloatValue: 2.2
StringValue: a string
AnotherIntValue: 220
Person:
  Age: 22
AList:
  - 1
  - 2
#>;
            def serializer = Serializer();
            def y42 = serializer.Deserialize.[Y4](StringReader(yaml));
            WriteLine($"IntValue(2) = $(y42.IntValue)");*/

            //WriteLine(y4.AstAsString);
            //WriteLine($"$intValue, $floatValue, $stringValue, $uriValue, $timeSpanValue");
            //WriteLine(GetLocals());
            
            _ = ReadLine();
        }
    }
}