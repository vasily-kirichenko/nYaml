using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Core.Option;
using Nemerle.Utility;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Macros.Core
{
    [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Class, Inherited = false, AllowMultiple = false)]
    public macro Show(ty: TypeBuilder) {
        ShowImpl.Transform (Macros.ImplicitCTX(), ty)
    }

    module ShowImpl {
        GetRecordCtorParams(typer: Typer, tb: TypeBuilder): option[list[string]] {
            Macros.DefineCTX(typer);
            def mappedMemberAttr = <[ ttype: Nemerle.Internal.MappedMemberAttribute; ]>.TypeInfo;
            
            def extractFieldName(p) {
                match (p.AttributesAndModifiers.FindAttributeWithArgs(mappedMemberAttr, tb.GlobalEnv)) {
                | Some((_, [<[$(name: string)]>])) => name
                | _ => assert(false)
                }
            }
            
            tb.GetConstructors(BindingFlags.Public)
              .Find(m => m.IsCustomAttributeDefined("Nemerle.Internal.RecordCtorAttribute"))
              .Map(ctor => ctor.GetParameters().Map(extractFieldName));
        }
        
        IsSupportedType(ty: TypeBuilder): bool {
            match (ty) {
            | _ when ty.IsDelegate with n = "delegates"
            | _ when ty.IsEnum with n = "enums"
            | _ when ty.IsInterface with n = "interfaces"
            | _ when ty.IsModule with n = "modules" => 
                Message.Error(ty.Location, $"The Show macro does not support $n."); 
                false
            | _ => true
            }
        }
        
        public Transform(typer: Typer, ty: TypeBuilder): void {
            when (IsSupportedType(ty)) {
                def existsHandmadeToString(opt: TypeBuilder) {
                    opt.GetDirectMembers()
                       .OfType.[IMethod]()
                       .Any(x => x.Name == "ToString" && x.Header.Parameters.IsEmpty)
                }
                
                foreach (opt when !existsHandmadeToString(opt) in ty.GetVariantOptions())
                {
                    when (GetRecordCtorParams(typer, opt) is Some(pars)) {
                        def fieldsExpr = pars.Fold(<[]>, (f, acc) => {
                                match (acc) {
                                | <[]> => <[ $(f: usesite).ToString() ]>
                                | _ => <[ $acc + ", " + $(f: usesite).ToString() ]>
                                }
                        });
                    
                        def body =
                            match (fieldsExpr) {
                            | <[]> => <[ $(opt.Name) ]>
                            | _ => <[ $(opt.Name) + "(" + $fieldsExpr + ")" ]>
                            };
                           
                        opt.Define(<[decl:
                            public override ToString(): string {
                                $body
                            }
                            ]>);
                    }
                }
            }
        }
    }
}
