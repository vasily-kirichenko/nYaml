using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Core.Option;
using Nemerle.Utility;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Macros.Core
{
    [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Class, Inherited = false, AllowMultiple = false)]
    public macro Show(ty: TypeBuilder) {
        ShowImpl.Transform (Macros.ImplicitCTX(), ty)
    }

    module ShowImpl {
        GetRecordCtorParams(typer: Typer, tb: TypeBuilder): option[list[string]] {
            Macros.DefineCTX(typer);
            def mappedMemberAttr = <[ ttype: Nemerle.Internal.MappedMemberAttribute; ]>.TypeInfo;
            
            def extractFieldName(p) {
                match (p.AttributesAndModifiers.FindAttributeWithArgs(mappedMemberAttr, tb.GlobalEnv)) {
                | Some((_, [<[$(name: string)]>])) => name
                | _ => assert(false)
                }
            }
            
            tb.GetConstructors(BindingFlags.Public)
              .Find(m => m.IsCustomAttributeDefined("Nemerle.Internal.RecordCtorAttribute"))
              .Map(ctor => ctor.GetParameters().Map(extractFieldName));
        }
        
        variant SupportedType {
            | Variant
            | Record
        }
        
        GetSupportedType(ty: TypeBuilder): option[SupportedType] {
            match (ty) {
            | _ when ty.IsDelegate with n = "delegates"
            | _ when ty.IsEnum with n = "enums"
            | _ when ty.IsInterface with n = "interfaces"
            | _ when ty.IsModule with n = "modules" => 
                Message.Error(ty.Location, $"The Show macro does not support $n."); 
                None()
            //| _ when ty.HasAttribute => 
            | _ when !ty.GetVariantOptions().IsEmpty => Some(SupportedType.Variant())
            | _ => Some(SupportedType.Record())
            }
        }
        
        DefineToString(typer: Typer, tb: TypeBuilder): void {
            def existsHandmadeToString =
                tb.GetDirectMembers()
                  .OfType.[IMethod]()
                  .Any(x => x.Name == "ToString" && x.Header.Parameters.IsEmpty);

            when (!existsHandmadeToString)
                when (GetRecordCtorParams(typer, tb) is Some(pars)) {
                    def fieldsExpr = pars.Fold(<[]>, (f, acc) => {
                            match (acc) {
                            | <[]> => <[ this.$(f: usesite).ToString() ]>
                            | _ => <[ $acc + ", " + this.$(f: usesite).ToString() ]>
                            }
                    });
                    
                    def body =
                        match (fieldsExpr) {
                        | <[]> => <[ $(tb.Name) ]>
                        | _ => <[ $(tb.Name) + "(" + $fieldsExpr + ")" ]>
                        };
                           
                    tb.Define(<[decl:
                        public override ToString(): string {
                            $body
                        }
                        ]>);
                }
        }
        
        public Transform(typer: Typer, ty: TypeBuilder): void {
            match (GetSupportedType(ty)) {
            | Some(st) =>
                match (st) {
                | Variant =>
                    foreach (opt in ty.GetVariantOptions())
                        DefineToString(typer, opt)
                | Record => 
                    DefineToString(typer, ty)
                }
            }
        }
    }
}
