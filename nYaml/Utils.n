using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Globalization;
using Utils;

namespace nYaml
{
    module ValueParser {
        public Bool(text: string): option[bool] {
            mutable r = false;
            if (Boolean.TryParse(text, out r)) Some(r) else None()
        }

        public TimeSpan(text: string): option[TimeSpan] {
            mutable r: TimeSpan;
            if (TimeSpan.TryParse(text, CultureInfo.InvariantCulture, out r))
                Some(r)
            else None()
        }

    //let (|DateTime|_|) =  
    //    tryParseWith (fun x -> DateTime.TryParse(x, CultureInfo.InvariantCulture, DateTimeStyles.AssumeUniversal))

        public Uri(text: string): option[Uri] {
            def schemas = ["http", "https", "ftp", "ftps", "sftp", "amqp", "file", "ssh", "tcp"];
            if (schemas.Exists(x => text.Trim().StartsWith(x + ":", StringComparison.InvariantCultureIgnoreCase))) {
                mutable uri: Uri;
                if (Uri.TryCreate(text, UriKind.Absolute, out uri))
                    Some(uri)
                else None()
            }
            else None()
        }
    }
    
    using SharpYaml.Serialization;
    using Nemerle.Compiler;
    using SharpYaml;
    using Macros.Core;
    
    [Record, Show]
    struct Pos {
        public Line: int;
        public Col: int
    }
    
    [Record, Show, ExtensionPattern(pos1 ==> pos2 = Range(pos1, pos2))]
    struct Range {
        public Start: Pos;
        public End: Pos;
    }
    
    type MapNode = KeyValuePair[object, object];
    
    class ObjectSerializerBackend: Serializers.DefaultObjectSerializerBackend
    {
        ranges: Dictionary[object, Range] = Dictionary();
        public Ranges: IReadOnlyDictionary[object, Range] { get { ranges }}
        
        GetCurrentRange[T](ctx: ObjectContext): Range {
            def e = ctx.Reader.Peek();
            Range(Pos(e.Start.Line, e.Start.Column), Pos(e.End.Line, e.End.Column));
        }
        
        public override ReadDictionaryItem(ctx: ref ObjectContext, keyValueType: KeyValuePair[Type, Type]): KeyValuePair[object, object] {
            def range = GetCurrentRange(ctx);
            def r = base.ReadDictionaryItem(ref ctx, keyValueType);
            ranges[r] = range;
            r
        }
        
        public override ReadCollectionItem(ctx: ref ObjectContext, value: object, itemType: Type): object {
            def range = GetCurrentRange(ctx);
            def r = base.ReadCollectionItem(ref ctx, value, itemType);
            ranges[r] = range;
            r
        }
        
        public override ReadMemberName(ctx: ref ObjectContext, memberName: string): string {
            def range = GetCurrentRange(ctx);
            def r = base.ReadMemberName(ref ctx, memberName);
            ranges[r] = range;
            r
        }
        
        public override ReadMemberValue(ctx: ref ObjectContext, memberDescriptor: IMemberDescriptor, memberValue: object, memberType: Type) : object {
            def range = GetCurrentRange(ctx);
            def r = base.ReadMemberValue(ref ctx, memberDescriptor, memberValue, memberType);
            ranges[r] = range;
            r
        }
    }
}
