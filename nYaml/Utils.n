using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Globalization;
using Utils;

namespace nYaml
{
    module ValueParser {
        public Bool(text: string): option[bool] {
            mutable r = false;
            if (Boolean.TryParse(text, out r)) Some(r) else None()
        }

        public TimeSpan(text: string): option[TimeSpan] {
            mutable r: TimeSpan;
            if (TimeSpan.TryParse(text, CultureInfo.InvariantCulture, out r))
                Some(r)
            else None()
        }

    //let (|DateTime|_|) =  
    //    tryParseWith (fun x -> DateTime.TryParse(x, CultureInfo.InvariantCulture, DateTimeStyles.AssumeUniversal))

        public Uri(text: string): option[Uri] {
            def schemas = ["http", "https", "ftp", "ftps", "sftp", "amqp", "file", "ssh", "tcp"];
            if (schemas.Exists(x => text.Trim().StartsWith(x + ":", StringComparison.InvariantCultureIgnoreCase))) {
                mutable uri: Uri;
                if (Uri.TryCreate(text, UriKind.Absolute, out uri))
                    Some(uri)
                else None()
            }
            else None()
        }
    }
    
    using SharpYaml.Serialization;
    using Nemerle.Compiler;
    using SharpYaml;
    using Macros.Core;
    
    [Rec, Show]
    struct Pos {
        Line: int;
        Col: int
    }
    
    [Rec, Show]
    struct Range {
        Begin: TextPoint;
        End: TextPoint
    }
    
    type KV[K, V] = KeyValuePair[K, V];
    type MapNode = KV[object, object];
    
    class ObjectSerializerBackend: Serializers.DefaultObjectSerializerBackend
    {
        ranges: Dictionary[object, Range] = Dictionary();
        baseLoc: Location;
        public Ranges: IReadOnlyDictionary[object, Range] { get { ranges }}
        
        public this (baseLoc: Location) {
            this.baseLoc = baseLoc;
        }
        
        GetCurrentRange[T](ctx: ObjectContext): Range {
            def e = ctx.Reader.Peek();
            Range(TextPoint(baseLoc.Begin.Line + e.Start.Line, e.Start.Column), 
                  TextPoint(baseLoc.Begin.Line + e.End.Line, e.End.Column));
        }
        
        public override ReadDictionaryItem(ctx: ref ObjectContext, kvTy: KV[Type, Type]): KV[object, object] {
            def range = GetCurrentRange(ctx);
            def r = base.ReadDictionaryItem(ref ctx, kvTy);
            ranges[r.Value] = range;
            r
        }
        
        public override ReadCollectionItem(ctx: ref ObjectContext, v: object, itemTy: Type): object {
            def range = GetCurrentRange(ctx);
            def r = base.ReadCollectionItem(ref ctx, v, itemTy);
            ranges[r] = range;
            r
        }
        
        public override ReadMemberName(ctx: ref ObjectContext, mn: string): string {
            def range = GetCurrentRange(ctx);
            def r = base.ReadMemberName(ref ctx, mn);
            ranges[r] = range;
            r
        }
        
        public override ReadMemberValue(ctx: ref ObjectContext, desc: IMemberDescriptor, value: object, ty: Type) : object {
            def range = GetCurrentRange(ctx);
            def r = base.ReadMemberValue(ref ctx, desc, value, ty);
            ranges[r] = range;
            r
        }
    }
}
