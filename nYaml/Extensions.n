using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Utils
{
    public class ListExtensions {
        public static Choose[T, U](this xs: list[T], f: T -> option[U]): list[U] {
            xs.Map(f).Filter(x => x.IsSome).Map(_.Value)
        }

        public static TryPick[T, U](this xs: list[T], f: T -> option[U]): option[U] {
            xs.MapLazyFiltered(x => { def r = f(x); (r.IsSome, r.Value) }).TryHead()
        }
    }
    
    public class SeqExtensions {
        public static TryHead[T](this xs: Seq[T]): option[T] {
            match (xs) {
                | h :: _ => Some(h)
                | _ => None()
            }
        }
    }
    
    public class DictionaryExtentions {
        public static TryFind[K, V](this dic: IDictionary[K, V], key: K): option[V] {
            mutable v;
            if (dic.TryGetValue(key, out v)) Some(v) else None()
        }

        public static TryFind[K, V](this dic: IReadOnlyDictionary[K, V], key: K): option[V] {
            mutable v;
            if (dic.TryGetValue(key, out v)) Some(v) else None()
        }
    }
    
    public class OptionExtensions
    {
        public static OfNull[T](this x: T): option[T] where T: class {
            match (x) {
                | null => None()
                | _ => Some(x)
            }
        }

        public static Bind[T, U](this x: option[T], f: T -> option[U]): option[U] {
            match (x) {
                | Some(x) => f(x)
                | None => None()
            }
        }
    }
}
