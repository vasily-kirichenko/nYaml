using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.ActivePatterns;
using Nemerle.Extensions;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using SharpYaml;
using SharpYaml.Serialization;
using SharpYaml.Serialization.Serializer;
using Utils;
using Macros.Core;
using System.Diagnostics;

namespace nYaml {
    /*
Following code:
    
[assembly: Yaml(Y4, <#
Foo: 1
	Person:
	    Name: "bar"
	    Age: 30
	    Addr: http://1.com/
#>)];    
    
generates code like this:
	        
public class Yaml {
    mutable _Foo: int = 1;
    _Person: Person_Type = Person_Type();
	    
    public Foo: int { get { _Foo }}
    public Person: Person_Type { get { _Person }}
	    
    public class Person_Type {
        mutable _Name: string = "bar";
        mutable _Age: int = 30;
        mutable _Addr: Uri = Uri("http://1.com");
	            
        public Name: string { get { _Name }}
        public Age: int { get { _Age }}
        public Addr: Uri { get { _Addr }}
    }
}*/

    [MacroUsage (MacroPhase.BeforeInheritance, MacroTargets.Assembly)]
	public macro Yaml(name: PExpr, text: PExpr)
	{
		def typer = Macros.ImplicitCTX();
		_ = YamlImpl.Transform(typer, name, text)
	}
	
	module YamlImpl {
		public Transform(typer: Typer, typeName: PExpr, txt: PExpr): PExpr {
		    //_ = Debugger.Launch();
		    match (typeName, txt) {
		    | (<[ $(PExpr.Ref(typeName)) ]>, <[ $(text: string) ]>) => { 
		        def serializerBackend = ObjectSerializerBackend(txt.Location);
		        def settings = SerializerSettings() <- 
		        { EmitDefaultValues = true; 
		          EmitTags = false; 
		          SortKeyForMapping = false;
		          ObjectSerializerBackend = serializerBackend
		        };
                def serializer = Serializer(settings);
                def node = serializer.Deserialize(StringReader(text));
            
                def loop(n: object): Node {
                    //Message.Hint($"Node: $n: $(n.GetType().Name)");
                    def r = serializerBackend.Ranges.TryFind(n);
                    match (n) {
                    | l is List[object] => Node.List(r, l.Map(loop))
                    | d is Dictionary[object, object] =>
                        Node.Map (r, d.NToList().Choose(p => {
                            match (p.Key) {
                            | key is string => Some(NamedNode(key, loop(p.Value)))
                            | _ => None()
                            }
                        }))
                    | s => Node.Scal (r, ScalarOps.Infer(s))
                    }
                }
            
                def node = loop(node);
                def nodeAsString = node.ToString();
                Util.locate(typeName.Location,
		        {
		            def tb = typer.Env.Define(<[ decl: [Record] public sealed class $typeName {} ]>);
		            tb.Define(<[ decl: public AstAsString: string { get { $nodeAsString }} ]>);
		            def ctorArgs = Builder.Transform(tb, None(), node);
		            //Debugger.Launch();
		            Message.Hint($"args = $(ctorArgs.ToString()), args.Type = $(ctorArgs.GetType())");
		            tb.Define(<[ decl: public this() { this(..$ctorArgs) } ]>);
		            tb.Compile();
		        });
		        <[]>
			  }
			| _ => Message.FatalError($"Name must be a symbol and text must be a string, but got $(typeName.GetType()), $(txt.GetType())")
		    }
		}
	}
	
	[Show]
    variant Scalar {
	    | Int { v: int }
	    | String { v: string }
	    | TimeSpan { v: System.TimeSpan }
	    | Bool { v: bool }
	    | Uri { v: System.Uri }
	    | Float { v: double; }
	}
    
	module ScalarOps {
        public ParseStr(str: string): Scalar {
            active match (str) {  
            | ValueParser.TimeSpan(x) => Scalar.TimeSpan(x)
            | ValueParser.Uri(x) => Scalar.Uri(x)
            | ValueParser.Bool(x) => Scalar.Bool(x)
            | x => Scalar.String(x)
            }
        }
        
	    public Infer(obj: object): Scalar {
	        match (obj) {
            | null => Scalar.String("")
            | b is System.Boolean => Scalar.Bool(b)
            | i is System.Int32 => Scalar.Int(i)
            | d is System.Double => Scalar.Float(d)
            | s is System.String => ParseStr(s)
            | t => throw Exception($"Unknown type $(t.GetType().ToString())")
            }
        }
            
        public UnderlyingType(this x: Scalar): Type {
            match (x) {
            | Scalar.Int(v) with x = v : object
            | Scalar.String(x)
            | Scalar.Bool(x)
            | Scalar.TimeSpan(x)
            | Scalar.Uri(x)
            | Scalar.Float(x) => x.GetType()
            }
        }

        public ValueAsExpr(this x: Scalar): PExpr {
            match (x) {
            | Int(x) => <[ $x ]>
            | String(x) => <[ $x ]>
            | Bool(x) => <[ $x ]>
            | TimeSpan(x) => <[ System.TimeSpan.FromMilliseconds($(x.TotalMilliseconds)) ]>
            | Uri(x) => <[ Uri($(x.OriginalString)) ]>
            | Float(x) => <[ $x ]>
            }
        }
        
        public UnderlyingTypeExpr(this x: Scalar, tb: TypeBuilder): PExpr { 
            PExpr.FromQualifiedIdentifier(tb.Manager, x.UnderlyingType().FullName)
        }
    }
        
    [Rec, Show] class NamedNode { Name: string; Node: Node }
    type MapElements = list[NamedNode];
    
    [Rec, Show]
    variant Node {
        Range: option[Range];
        | Scal { v: Scalar }
        | List { elements: list[Node] }
        | Map { nodes: MapElements }
        
        public GetLocation(parentBuilder: TypeBuilder): Location {
            Range.Map(loc => Location(parentBuilder.Location.FileIndex, loc.Begin, loc.End))
                 .WithDefault(parentBuilder.Location)
        }
    }
    
    module Builder {
        public Transform (tb: TypeBuilder, name: option[string], node: Node): list[PExpr]  {
            //Debugger.Launch();
            match (name, node) {
            | (Some(name), Scal(_) as scal) => [TransformScalar(tb, name, scal)]
            | (_, Map(_) as m) => TransformMap(tb, name, m.nodes)
            | (Some(name), List(_) as l) => ListBuilder.Transform(tb, name, l)
            | (None, _) => Message.FatalError(tb.Location, "Only Maps are allowed at the root level.")
            }
        }
        
        TransformScalar(tb: TypeBuilder, name: string, node: Node.Scal): PExpr {
            def fieldType = node.v.UnderlyingTypeExpr(tb);
            tb.Define(<[decl: public $(name: usesite): $fieldType; ]>);
            node.v.ValueAsExpr()
        }
        
        TransformChildren(tb: TypeBuilder, children: list[NamedNode]): list[PExpr] {
            children.Map(x => Transform(tb, Some(x.Name), x.Node)).Flatten()
        }
        
        public GenMapType(parentTb: TypeBuilder, name: string): TypeBuilder {
            def typeName = Macros.NewSymbol(name);
            def mapTb = parentTb.DefineNestedType(<[decl: [Record] public sealed class $typeName { } ]>);
            def typeExpr = <[ $(typeName: name) ]>;
            parentTb.Define(<[decl: public $(name: usesite): $typeExpr; ]>);
            mapTb
        }
        
        TransformMap(tb: TypeBuilder, name: option[string], children: list[NamedNode]): list[PExpr] {
            match (name) {
            | Some (name) => 
                def tb = GenMapType(tb, name);
                def ctorArgs = TransformChildren(tb, children);
                def result = <[ $(tb.Name: usesite)(..$ctorArgs) ]>;
                tb.Compile();
                [result]
            | None => TransformChildren(tb, children);
            }
        }
    }
    
    module ListBuilder {
        variant ListKind {
            | Scalars { elements: list[Scalar] }
            | Maps { elements: list[MapElements] }
        }
        
        GetListKind(tb: TypeBuilder, list: Node.List): ListKind {
            match (list) {
            | _ when list.elements.All(_ is Node.Scal) => ListKind.Scalars(list.elements.OfType.[Node.Scal]().Map(_.v))
            | _ when list.elements.All(_ is Node.Map) => ListKind.Maps(list.elements.OfType.[Node.Map]().Map(_.nodes))
            | _ => Message.FatalError(list.GetLocation(tb), "All list elements must be either scalars or maps")
            }
        }
        
        GetCommonType(tb: TypeBuilder, locs: list[Location], name: string, scalars: list[Scalar]): PExpr {
            match (scalars.Map(x => x.UnderlyingType()).Distinct().NToList()) {
            | [_] => scalars.Head.UnderlyingTypeExpr(tb)
            | _ => 
                foreach(loc in locs) Message.Warning(loc, $"Common type for $name: $scalars was inferred as object.");
                <[ object ]>
            }
        }
        
        public Transform(tb: TypeBuilder, name: string, list: Node.List): list[PExpr] {
            def locs = [tb.Location, list.GetLocation(tb)];
            def message(f: Location * string -> void, msg) {
                foreach(loc in locs) f(loc, msg)
            }
            
            match (GetListKind(tb, list)) {
            | ListKind.Scalars(elements) =>
                when (list.elements.Exists(x => !(x is Node.Scal)))
                    message(Message.Error, "Lists of scalars are supported only.");
            
                def elemType = GetCommonType(tb, locs, name, elements);
                def elemValues = elements.Map(x => <[ $(x.ValueAsExpr()) : $elemType ]>);
                tb.Define(<[decl: public $(name: usesite): list[$elemType]; ]>);    
                [<[ [..$elemValues] ]>]
            | ListKind.Maps(elements) =>
                //Debugger.Launch();
                def allElementsFlatList = elements.SelectMany(x => x);
                when (allElementsFlatList.Exists(x => !(x.Node is Node.Scal)))
                    message(Message.Error, "Map elements of lists must contain scalars only.");
                def uniqueNames = allElementsFlatList.Map(x => x.Name).Distinct().NToList();    
                def typesByName =
                    allElementsFlatList
                        .Grouping(x => (x.Name, x))
                        .Select(nodesWithSameName => {
                            def scalars = 
                                nodesWithSameName.Value.Map(_.Node).OfType.[Node.Scal]().Map(_.v);
                                
                            def commonType = GetCommonType(tb, locs, name, scalars);
                            def commonType =
                                if (nodesWithSameName.Value.Count() == elements.Length) commonType
                                else <[ option[$commonType] ]>;
                            (nodesWithSameName.Key, commonType)
                        })
                        .ToDictionary(x => x[0], x => x[1]);
                message(Message.Hint, $"List of maps \"$name\": $(typesByName.Map(p => $\"$(p.Key) => $(p.Value)\")))");
                def mapTb = Builder.GenMapType(tb, name);
                foreach(name in uniqueNames){
                    def fieldType = typesByName[name];
                    mapTb.Define(<[decl: public $(name: usesite): $fieldType; ]>);
                }
                mapTb.Compile();
                [<[]>]
            }
       }
    }
}