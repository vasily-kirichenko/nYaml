using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.ActivePatterns;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using YamlDotNet;
using YamlDotNet.Serialization;
using YamlDotNet.Serialization.Serializer;
using nYaml.Extensions;

namespace nYaml
{
	public macro Yaml(name: PExpr, text: PExpr)
	syntax("yaml", name, "of", text)
	{
		def typer = Macros.ImplicitCTX();
		YamlImpl.Transform(typer, name, text);
	}
	
	variant Scalar {
	    | Int { v: int }
	    | String { v: string }
	    | TimeSpan { v: System.TimeSpan }
	    | Bool { v: bool }
	    | Uri { v: System.Uri }
	    | Float { v: double }
	    public override ToString(): string {
	        match (this) {
	        | Int(x) => $"Int($x)"
	        | String(x) => $"String($x))"
	        | TimeSpan(x) => $"TimeSpan($x))"
	        | Bool(x) => $"Bool($x))"
	        | Uri(x) => $"Uri($x))"
	        | Float(x) => $"Float($x))"
	        }
	    }
    
        public static ParseStr(str: string): Scalar {
            active match (str) {
            | ValueParser.TimeSpan(x) => Scalar.TimeSpan(x)
            | ValueParser.Uri(x) => Scalar.Uri(x)
            | x => String(x)
            }
        }
        
	    public static FromObj(obj: object): Scalar {
	        match (obj) {
            | null => String("")
            | b is System.Boolean => Bool(b)
            | i is System.Int32 => Int(i)
            | d is System.Double => Float(d)
            | s is System.String => Scalar.ParseStr(s)
            | t => throw Exception($"Unknown type $(t.GetType().ToString())")
            }
        }
            
        //member x.UnderlyingType = 
        //    match x with
        //    | Int x -> x.GetType()
        //    | String x -> x.GetType()
        //    | Bool x -> x.GetType()
        //    | TimeSpan x -> x.GetType()
        //    | Uri x -> x.GetType()
        //    | Float x -> x.GetType()
        //member x.BoxedValue =
        //    match x with
        //    | Int x -> box x
        //    | String x -> box x
        //    | TimeSpan x -> box x
        //    | Bool x -> box x
        //    | Uri x -> box x
        //    | Float x -> box x
    }    
        
    variant Node {
        | Scal { v: Scalar }
        | List { children: list[Node] }
        | Map { nodes: list[string * Node] }
        public override ToString(): string {
            match (this) {
            | Scal(x) => $"Scalar($x))"
            | List(x) => $"List(..$x))"
            | Map(x) => $"Map(..$x))"
            }
        }
    }
	
	module YamlImpl {
		public Transform(typer: Typer, typeName: PExpr, text: PExpr): PExpr {
		    match (typeName, text) {
		    | (<[ $(PExpr.Ref(typeName)) ]>, <[ $(PExpr.Literal(Literal.String(text))) ]>) => { 
                def serializer = Deserializer();
                def node = serializer.Deserialize(StringReader(text));
            
                def loop(n: object) {
                    match (n) {
                    | l is List[object] => Node.List (l.Map(loop))
                    | d is Dictionary[object, object] => 
                        Node.Map (d.NToList().Choose(p => {
                            match (p.Key) {
                            | key is string => Some(key, loop(p.Value))
                            | _ => None()
                            }}))
                    | scalar =>
                        Node.Scal (Scalar.FromObj(scalar))
                    }
                }
            
                def node = loop(node);
                def nodeAsString = node.ToString();
                unless (!typer.IsMainPass) {
		            def builder = typer.Env.Define(<[ decl:
            		    public partial class $(typeName: name) {
            		        public AstAsString: string { get { $nodeAsString }}
            		    
            		    }
		                ]>);
		        
		            unless(typer.InErrorMode)
		                builder.Compile();
		        }
		            
		        <[]>
			  }
			| _ => Message.FatalError($"Name must be a symbol and text must be a string, but got $(typeName.GetType().ToString()), $(text.ToString())")
		    }
		}
	}
}
