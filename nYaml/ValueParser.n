using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Globalization;

namespace nYaml
{
    module ValueParser {
        public Bool(x: string): option[bool] {
            mutable r = false;
            if (Boolean.TryParse(x, out r)) Some(r) else None()
        }
    //let (|Int|_|) = tryParseWith Int32.TryParse
    //let (|Float|_|) = tryParseWith (fun x -> Double.TryParse(x, NumberStyles.Any, CultureInfo.InvariantCulture))
    //let (|TimeSpan|_|) = tryParseWith (fun x -> TimeSpan.TryParse(x, CultureInfo.InvariantCulture))

    //let (|DateTime|_|) =  
    //    tryParseWith (fun x -> DateTime.TryParse(x, CultureInfo.InvariantCulture, DateTimeStyles.AssumeUniversal))

    //let (|Uri|_|) (text: string) = 
    //    ["http"; "https"; "ftp"; "ftps"; "sftp"; "amqp"; "file"; "ssh"; "tcp"] 
    //    |> List.tryPick (fun x -> 
    //        if text.Trim().StartsWith(x + ":", StringComparison.InvariantCultureIgnoreCase) then
    //            match System.Uri.TryCreate(text, UriKind.Absolute) with
    //            | true, uri -> Some uri
    //            | _ -> None
    //        else None)
    }
}
